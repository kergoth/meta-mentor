if [ -z "$ZSH_NAME" ] && [ "x$0" = "x./setup-environment" ]; then
    echo >&2 "Error: This script needs to be sourced. Please run as '. ./setup-environment'"
else
    if [ -n "$BASH_SOURCE" ]; then
        scriptdir="`dirname $BASH_SOURCE`"
    elif [ -n "$ZSH_NAME" ]; then
        scriptdir="`dirname $0`"
    else
        scriptdir="`pwd`"
    fi
    scriptdir=`readlink -f "$scriptdir"`

    mel_quote(){
        sed -e "s,','\\\\'',g; 1s,^,',; \$s,\$,',;" << EOF
    $1
EOF
    }

    mel_save () {
        case "$1" in
        # when a string contains a "'" we have to escape it
        *\'*)
            mel_saved="$mel_saved $(mel_quote "$1")"
            ;;
        # otherwise just quote the variable
        *)
            mel_saved="$mel_saved '$1'"
            ;;
        esac
    }

    mel_abspath () {
        _path="$1"
        if [ -n "${_path##/*}" ]; then
            _path="$PWD/$1"
        fi
        echo "$_path"
    }

    if [ -f conf/local.conf -o -f conf/bblayers.conf ]; then
        # Assuming we're already in the build dir
        BUILDDIR=$PWD
    else
        BUILDDIR=$PWD/build
    fi

    mel_saved=
    mel_manifest=
    mel_fail=0
    mel_argnum=1
    while [ $mel_argnum -le $# ]; do
        mel_arg="$(eval printf "%s" "\$$mel_argnum")"
        case "$mel_arg" in
            -b)
                BUILDDIR="$(eval printf "%s" "\$$(expr $mel_argnum + 1)")"
                if [ -z "$BUILDDIR" ]; then
                    echo >&2 "-b requires an argument"
                    mel_fail=1
                else
                    BUILDDIR="$(mel_abspath "$BUILDDIR")"
                fi
                ;;
            -m)
                mel_manifest="$(eval printf "%s" "\$$(expr $mel_argnum + 1)")"
                mel_argnum="$(expr $mel_argnum + 1)"
                if [ -z "$mel_manifest" ]; then
                    echo >&2 "-m requires an argument"
                    mel_fail=1
                else
                    mel_argnum="$(expr $mel_argnum + 1)"
                    if [ ! -e "$mel_manifest" ]; then
                        echo >&2 "Error: manifest path $mel_manifest does not exist"
                        mel_fail=1
                    else
                        mel_manifest="$(mel_abspath "$mel_manifest")"
                    fi
                fi
                continue
                ;;
        esac
        mel_save "$mel_arg"
        mel_argnum="$(expr $mel_argnum + 1)"
    done
    eval set -- "$mel_saved"
    unset mel_saved mel_argnum mel_arg
    unset mel_save mel_quote mel_abspath

    if [ $mel_fail -eq 0 ]; then
        "$scriptdir/mel-checkout" "$BUILDDIR" "$mel_manifest" && \
            cd "$BUILDDIR" && . ./meta-mentor/setup-environment "$@" -b .
        mel_fail=$?
    fi
    unset mel_manifest scriptdir
    test $mel_fail -eq 0
fi
# vim: set ft=sh :
